@model FIT5032_Assignment.Models.USER

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create User</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4></h4>
    <hr />

    @*User @Html.EditorFor and @Html.ValidationMessageFor to encode the output to prevent XSS*@
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
        </div>
    </div>
    @*Check whether username is empty*@
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var form = document.querySelector("form");
            form.addEventListener("submit", function (e) {
                var descriptionInput = document.querySelector("[name='Username']");
                if (descriptionInput.value.trim() === "") {
                    e.preventDefault();
                    alert("Username cannot be empty");
                }
            });
        });
    </script>

    <div class="form-group">
        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var form = document.querySelector("form");
            form.addEventListener("submit", function (e) {
                var descriptionInput = document.querySelector("[name='Password']");
                if (descriptionInput.value.trim() === "") {
                    e.preventDefault();
                    alert("Password cannot be empty");
                }
            });
        });
    </script>

    <div class="form-group">
        @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var form = document.querySelector("form");
            form.addEventListener("submit", function (e) {
                var descriptionInput = document.querySelector("[name='Role']");
                if (descriptionInput.value.trim() === "") {
                    e.preventDefault();
                    alert("Role cannot be empty");
                }
            });
        });
    </script>

    <br />
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "UserManagement")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
